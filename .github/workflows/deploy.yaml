name: Deploy

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
    - name: Test with flake8
      run: python -m flake8 --ignore=F401,E501,W291,W292,E301,W293,E123,I001,I004 backend

  build_backend:
    name: Push backend image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend:latest

  build_frontend:
    name: Push frontend image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend:latest

  build_gateway:
    name: Push nginx gateway image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} 
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [build_backend, build_frontend, build_gateway]

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSH
      - name: Setup SSH key & known_hosts
        run: |
          mkdir -p "$HOME/.ssh"
          echo "${{ secrets.SSH_KEY }}" > "$HOME/.ssh/id_ed25519"
          chmod 600 "$HOME/.ssh/id_ed25519"
          # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Å—Ç –≤ known_hosts, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
          ssh-keyscan -H ${{ secrets.HOST }} >> "$HOME/.ssh/known_hosts"

      # 2. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ rsync (–±—ã—Å—Ç—Ä–µ–µ –∏ —É–¥–æ–±–Ω–µ–µ scp)
      - name: Copy files to server
        run: |
          rsync -avz --progress \
            -e "ssh -i $HOME/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
            docker-compose.production.yml .env \
            ${{ secrets.USER }}@${{ secrets.HOST }}:~/kittygram/

      # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      - name: Deploy via SSH
        run: |
          ssh -i "$HOME/.ssh/id_ed25519" \
              -o StrictHostKeyChecking=no \
              ${{ secrets.USER }}@${{ secrets.HOST }} \
              bash -c '
                set -e
                cd ~/kittygram

                docker-compose -f docker-compose.production.yml pull
                docker-compose -f docker-compose.production.yml down
                docker-compose -f docker-compose.production.yml up -d

                echo "Waiting 30 sec for the PostgreSQL container..."
                sleep 30

                docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
                docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
              '

  auto_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r ./backend/requirements.txt 
    - name: Run tests
      run: python -m pytest

  telegram-notify:
    runs-on: ubuntu-latest
    needs: auto_tests
    steps:
    - name: Send Telegram notification
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          üöÄ Deployment of ${{ github.repository }} completed.
          ‚úÖ All jobs passed:
          üë§ Author: ${{ github.actor }}
          üìù Latest commit message: ${{ github.event.commits[0].message }}
          üîó View commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}